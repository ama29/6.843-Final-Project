import os.path

import pandas as pd
from matplotlib import pyplot as plt

from manipulation_main.training.imitation_utils import BASE_DIR

EPISODE_MEAN_LEN = 14.5426


def graph_bc_dagger(bc_log_path: str, dagger_log_path: str):
    bc_df = pd.read_csv(bc_log_path)
    dagger_df = pd.read_csv(dagger_log_path)
    combined_df = pd.DataFrame()
    for index, row in bc_df.iterrows():
        combined_df.at[row["num_expert_demos"] * EPISODE_MEAN_LEN, "bc_success"] = row["train_success_mean"]

    for index, row in dagger_df.iterrows():
        if pd.isna(row["dagger/total_expert_count"]):
            continue
        combined_df.at[row["dagger/total_expert_count"], "dagger_success"] = row["rollout/success_mean"]

    plt.plot(combined_df)
    plt.xlabel("Number of expert demonstrations")
    plt.ylabel("Mean episode success")
    plt.title("Daggger vs BC Expert Demo Utilization")
    plt.legend(["BC", "DAgger"])
    plt.show()


def graph_dagger_transformer(cnn_log_path: str, trans_log_path: str):
    cnn_df = pd.read_csv(cnn_log_path)
    trans_df = pd.read_csv(trans_log_path)
    combined_df = pd.DataFrame()
    for index, row in cnn_df.iterrows():
        if pd.isna(row["dagger/total_expert_count"]):
            continue
        combined_df.at[row["dagger/total_expert_count"], "cnn_success"] = row["rollout/success_mean"]

    for index, row in trans_df.iterrows():
        if pd.isna(row["dagger/total_expert_count"]):
            continue
        combined_df.at[row["dagger/total_expert_count"], "tran_success"] = row["rollout/success_mean"]

    plt.plot(combined_df)
    plt.xlabel("Number of expert demonstrations")
    plt.ylabel("Mean episode success")
    plt.title("CNN vs Transformer Performance on Dagger Task")
    plt.legend(["CNN Success", "Visual Transformer Success"], loc="upper left")
    plt.show()


def graph_dagger_expert_on_fail(cnn_log_path: str, expert_log_path: str):
    cnn_df = pd.read_csv(cnn_log_path)
    expert_df = pd.read_csv(expert_log_path)
    combined_df = pd.DataFrame()
    for index, row in cnn_df.iterrows():
        if pd.isna(row["dagger/total_expert_count"]):
            continue
        combined_df.at[row["dagger/total_expert_count"], "cnn_success"] = row["rollout/success_mean"]

    for index, row in expert_df.iterrows():
        if pd.isna(row["dagger/total_expert_count"]):
            continue
        combined_df.at[row["dagger/total_expert_count"], "tran_success"] = row["rollout/success_mean"]

    plt.plot(combined_df)
    plt.xlabel("Number of expert demonstrations")
    plt.ylabel("Mean episode success")
    plt.title("Only Query Expert on Episode Failure for Dagger Task")
    plt.legend(["Query Expert Randomly", "Only Query Expert on Failure"], loc="upper left")
    plt.show()

def graph_dagger_expert_on_fail_v2(cnn_log_path: str, expert_log_path: str):
    cnn_df = pd.read_csv(cnn_log_path)
    expert_df = pd.read_csv(expert_log_path)
    combined_df = pd.DataFrame()
    for index, row in cnn_df.iterrows():
        if pd.isna(row["dagger/total_expert_count"]):
            continue
        combined_df.at[row["dagger/total_expert_count"], "cnn_success"] = row["rollout/success_mean"]

    for index, row in expert_df.iterrows():
        if pd.isna(row["dagger/total_expert_count"]):
            continue
        combined_df.at[row["dagger/total_expert_count"], "tran_success"] = row["rollout/success_mean"]

    plt.plot(combined_df)
    plt.xlabel("Number of expert demonstrations")
    plt.ylabel("Mean episode success")
    plt.title("Only Query Expert on Episode Failure for Dagger Task")
    plt.legend(["Query Expert Randomly", "Only Query Expert on Failure v2"], loc="upper left")
    plt.show()


def graph_bc_transformer(cnn_log_path: str, trans_log_path: str):
    cnn_df = pd.read_csv(cnn_log_path)
    trans_df = pd.read_csv(trans_log_path)
    combined_df = pd.DataFrame()
    for index, row in cnn_df.iterrows():
        combined_df.at[row["num_expert_demos"] * EPISODE_MEAN_LEN, "cnn_success"] = row["train_success_mean"]
    for index, row in trans_df.iterrows():
        combined_df.at[row["num_expert_demos"] * EPISODE_MEAN_LEN, "trans_success"] = row["train_success_mean"]

    plt.plot(combined_df)
    plt.xlabel("Number of expert demonstrations")
    plt.ylabel("Mean episode success")
    plt.title("CNN vs Transformer Performance on Behavior Cloning Task")
    plt.legend(["CNN Success", "Visual Transformer Success"], loc="upper left")

    plt.show()


def graph_env_interactions(bc_log_path: str, dagger_log_path: str, rl_log_path: str):
    bc_df = pd.read_csv(bc_log_path)
    dagger_df = pd.read_csv(dagger_log_path)
    rl_df = pd.read_csv(rl_log_path)
    combined_df = pd.DataFrame()

    for index, row in bc_df.iterrows():
        combined_df.at[row["num_expert_demos"] * EPISODE_MEAN_LEN, "bc_success"] = row["train_success_mean"]

    for index, row in dagger_df.iterrows():
        if pd.isna(row["dagger/total_timesteps"]):
            continue
        combined_df.at[row["dagger/total_timesteps"], "dagger_success"] = row["rollout/success_mean"]

    for index, row in rl_df.iterrows():
        if row["total_timesteps"] > 200000:
            continue
        combined_df.at[row["total_timesteps"], "rl_success"] = row["success_rate"]

    plt.plot(combined_df)
    plt.xlabel("Number of environment interactions")
    plt.ylabel("Mean episode success")
    plt.title("BC vs Dagger vs RL Environment Interactions")
    plt.legend(["BC Success", "Dagger Success", "RL Success"], loc="lower right")
    plt.show()


def graph_dagger_beta(dagger_beta_log_path: str, beta: int):
    dagger_df = pd.read_csv(dagger_beta_log_path)
    x_values = []
    y_values = []
    for index, row in dagger_df.iterrows():
        if pd.isna(row["dagger/total_expert_count"]):
            continue
        x_values.append(float(row["dagger/total_expert_count"]))
        y_values.append(float(row["rollout/success_mean"]))
        #dagger_df.at[row["dagger/total_expert_count"], "beta_success"] = row["rollout/success_mean"]
    print("x", x_values)
    print("y", y_values)
    print("Plotting" + str(beta))
    plt.plot(x_values, y_values)
    plt.xlabel("Number of expert demonstrations")
    plt.ylabel("Mean episode success")
    plt.title("Episode success vs " + str(100-beta) + "% randomly injected imitation policy")
    plt.legend(["Dagger beta success"], loc="lower right")
    plt.savefig("dagger_beta"+str(beta)+".png")
if __name__ == "__main__":
    cnn_bc_log_path = os.path.join(BASE_DIR, "trained_models", "SAC_depth_1mbuffer", "bc", "cnn_precise_all_logs.csv")
    tran_bc_log_path = os.path.join(BASE_DIR, "trained_models", "SAC_depth_1mbuffer", "bc", "tran_precise_all_logs.csv")
    dagger_cnn_log_path = os.path.join(BASE_DIR, "trained_models", "SAC_depth_1mbuffer", "dagger", "dagger_cnn", "logs",
                                       "progress.csv")
    dagger_trns_log_path = os.path.join(BASE_DIR, "trained_models", "SAC_depth_1mbuffer", "dagger",
                                        "dagger_transformer", "logs",
                                        "progress.csv")
    dagger_expert_log_path = os.path.join(BASE_DIR, "trained_models", "SAC_depth_1mbuffer", "dagger",
                                        "dagger_expert_on_fail", "logs",
                                        "progress.csv")
    dagger_expert_v2_log_path = os.path.join(BASE_DIR, "trained_models", "SAC_depth_1mbuffer", "dagger",
                                        "dagger_expert_on_fail_v2", "logs",
                                        "progress.csv")
    rl_log_path = os.path.join(BASE_DIR, "trained_models", "SAC_depth_1mbuffer", "logs.csv")
    for beta in range(5, 105, 10):
        dagger_beta_log_path = os.path.join(BASE_DIR, "trained_models", "SAC_depth_1mbuffer", "dagger", "dagger_beta" + str(beta), "logs", "progress.csv")
        graph_dagger_beta(dagger_beta_log_path, beta) 
    # graph_bc_dagger(cnn_bc_log_path, dagger_cnn_log_path)
    # graph_bc_transformer(cnn_bc_log_path, tran_bc_log_path)
    # graph_dagger_transformer(dagger_cnn_log_path, dagger_trns_log_path)
    # graph_dagger_expert_on_fail(dagger_cnn_log_path, dagger_expert_log_path)
    #graph_dagger_expert_on_fail_v2(dagger_cnn_log_path, dagger_expert_v2_log_path)
    # graph_env_interactions(cnn_bc_log_path, dagger_cnn_log_path, rl_log_path)
